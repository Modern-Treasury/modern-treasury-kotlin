// File generated from our OpenAPI spec by Stainless.

package com.moderntreasury.api.models

import com.fasterxml.jackson.annotation.JsonAnyGetter
import com.fasterxml.jackson.annotation.JsonAnySetter
import com.fasterxml.jackson.annotation.JsonCreator
import com.fasterxml.jackson.annotation.JsonProperty
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.core.ObjectCodec
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializerProvider
import com.fasterxml.jackson.databind.annotation.JsonDeserialize
import com.fasterxml.jackson.databind.annotation.JsonSerialize
import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.moderntreasury.api.core.BaseDeserializer
import com.moderntreasury.api.core.BaseSerializer
import com.moderntreasury.api.core.Enum
import com.moderntreasury.api.core.ExcludeMissing
import com.moderntreasury.api.core.JsonField
import com.moderntreasury.api.core.JsonMissing
import com.moderntreasury.api.core.JsonValue
import com.moderntreasury.api.core.NoAutoDetect
import com.moderntreasury.api.core.getOrThrow
import com.moderntreasury.api.core.immutableEmptyMap
import com.moderntreasury.api.core.toImmutable
import com.moderntreasury.api.errors.ModernTreasuryInvalidDataException
import java.time.OffsetDateTime
import java.util.Objects

@NoAutoDetect
class BulkResult
@JsonCreator
private constructor(
    @JsonProperty("id") @ExcludeMissing private val id: JsonField<String> = JsonMissing.of(),
    @JsonProperty("created_at")
    @ExcludeMissing
    private val createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonProperty("entity")
    @ExcludeMissing
    private val entity: JsonField<Entity> = JsonMissing.of(),
    @JsonProperty("entity_id")
    @ExcludeMissing
    private val entityId: JsonField<String> = JsonMissing.of(),
    @JsonProperty("entity_type")
    @ExcludeMissing
    private val entityType: JsonField<EntityType> = JsonMissing.of(),
    @JsonProperty("live_mode")
    @ExcludeMissing
    private val liveMode: JsonField<Boolean> = JsonMissing.of(),
    @JsonProperty("object")
    @ExcludeMissing
    private val object_: JsonField<String> = JsonMissing.of(),
    @JsonProperty("request_id")
    @ExcludeMissing
    private val requestId: JsonField<String> = JsonMissing.of(),
    @JsonProperty("request_params")
    @ExcludeMissing
    private val requestParams: JsonField<RequestParams> = JsonMissing.of(),
    @JsonProperty("request_type")
    @ExcludeMissing
    private val requestType: JsonField<RequestType> = JsonMissing.of(),
    @JsonProperty("status")
    @ExcludeMissing
    private val status: JsonField<Status> = JsonMissing.of(),
    @JsonProperty("updated_at")
    @ExcludeMissing
    private val updatedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
    @JsonAnySetter private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
) {

    fun id(): String = id.getRequired("id")

    fun createdAt(): OffsetDateTime = createdAt.getRequired("created_at")

    /**
     * An object with type as indicated by `entity_type`. This is the result object that is
     * generated by performing the requested action on the provided input `request_params`.
     */
    fun entity(): Entity = entity.getRequired("entity")

    /** Unique identifier for the result entity object. */
    fun entityId(): String = entityId.getRequired("entity_id")

    /**
     * The type of the result entity object. For a successful bulk result, this is the same as the
     * `resource_type` of the bulk request. For a failed bulk result, this is always bulk_error
     */
    fun entityType(): EntityType = entityType.getRequired("entity_type")

    /**
     * This field will be true if this object exists in the live environment or false if it exists
     * in the test environment.
     */
    fun liveMode(): Boolean = liveMode.getRequired("live_mode")

    fun object_(): String = object_.getRequired("object")

    /**
     * Unique identifier for the request that created this bulk result. This is the ID of the bulk
     * request when `request_type` is bulk_request
     */
    fun requestId(): String = requestId.getRequired("request_id")

    /**
     * An optional object that contains the provided input params for the request that created this
     * result. This is an item in the `resources` array for the bulk_request
     */
    fun requestParams(): RequestParams? = requestParams.getNullable("request_params")

    /**
     * The type of the request that created this result. bulk_request is the only supported
     * `request_type`
     */
    fun requestType(): RequestType = requestType.getRequired("request_type")

    /** One of successful or failed. */
    fun status(): Status = status.getRequired("status")

    fun updatedAt(): OffsetDateTime = updatedAt.getRequired("updated_at")

    @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

    @JsonProperty("created_at")
    @ExcludeMissing
    fun _createdAt(): JsonField<OffsetDateTime> = createdAt

    /**
     * An object with type as indicated by `entity_type`. This is the result object that is
     * generated by performing the requested action on the provided input `request_params`.
     */
    @JsonProperty("entity") @ExcludeMissing fun _entity(): JsonField<Entity> = entity

    /** Unique identifier for the result entity object. */
    @JsonProperty("entity_id") @ExcludeMissing fun _entityId(): JsonField<String> = entityId

    /**
     * The type of the result entity object. For a successful bulk result, this is the same as the
     * `resource_type` of the bulk request. For a failed bulk result, this is always bulk_error
     */
    @JsonProperty("entity_type")
    @ExcludeMissing
    fun _entityType(): JsonField<EntityType> = entityType

    /**
     * This field will be true if this object exists in the live environment or false if it exists
     * in the test environment.
     */
    @JsonProperty("live_mode") @ExcludeMissing fun _liveMode(): JsonField<Boolean> = liveMode

    @JsonProperty("object") @ExcludeMissing fun _object_(): JsonField<String> = object_

    /**
     * Unique identifier for the request that created this bulk result. This is the ID of the bulk
     * request when `request_type` is bulk_request
     */
    @JsonProperty("request_id") @ExcludeMissing fun _requestId(): JsonField<String> = requestId

    /**
     * An optional object that contains the provided input params for the request that created this
     * result. This is an item in the `resources` array for the bulk_request
     */
    @JsonProperty("request_params")
    @ExcludeMissing
    fun _requestParams(): JsonField<RequestParams> = requestParams

    /**
     * The type of the request that created this result. bulk_request is the only supported
     * `request_type`
     */
    @JsonProperty("request_type")
    @ExcludeMissing
    fun _requestType(): JsonField<RequestType> = requestType

    /** One of successful or failed. */
    @JsonProperty("status") @ExcludeMissing fun _status(): JsonField<Status> = status

    @JsonProperty("updated_at")
    @ExcludeMissing
    fun _updatedAt(): JsonField<OffsetDateTime> = updatedAt

    @JsonAnyGetter
    @ExcludeMissing
    fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

    private var validated: Boolean = false

    fun validate(): BulkResult = apply {
        if (!validated) {
            id()
            createdAt()
            entity()
            entityId()
            entityType()
            liveMode()
            object_()
            requestId()
            requestParams()?.validate()
            requestType()
            status()
            updatedAt()
            validated = true
        }
    }

    fun toBuilder() = Builder().from(this)

    companion object {

        fun builder() = Builder()
    }

    class Builder {

        private var id: JsonField<String>? = null
        private var createdAt: JsonField<OffsetDateTime>? = null
        private var entity: JsonField<Entity>? = null
        private var entityId: JsonField<String>? = null
        private var entityType: JsonField<EntityType>? = null
        private var liveMode: JsonField<Boolean>? = null
        private var object_: JsonField<String>? = null
        private var requestId: JsonField<String>? = null
        private var requestParams: JsonField<RequestParams>? = null
        private var requestType: JsonField<RequestType>? = null
        private var status: JsonField<Status>? = null
        private var updatedAt: JsonField<OffsetDateTime>? = null
        private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

        internal fun from(bulkResult: BulkResult) = apply {
            id = bulkResult.id
            createdAt = bulkResult.createdAt
            entity = bulkResult.entity
            entityId = bulkResult.entityId
            entityType = bulkResult.entityType
            liveMode = bulkResult.liveMode
            object_ = bulkResult.object_
            requestId = bulkResult.requestId
            requestParams = bulkResult.requestParams
            requestType = bulkResult.requestType
            status = bulkResult.status
            updatedAt = bulkResult.updatedAt
            additionalProperties = bulkResult.additionalProperties.toMutableMap()
        }

        fun id(id: String) = id(JsonField.of(id))

        fun id(id: JsonField<String>) = apply { this.id = id }

        fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

        fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply { this.createdAt = createdAt }

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(entity: Entity) = entity(JsonField.of(entity))

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(entity: JsonField<Entity>) = apply { this.entity = entity }

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(paymentOrder: PaymentOrder) = entity(Entity.ofPaymentOrder(paymentOrder))

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(expectedPayment: ExpectedPayment) =
            entity(Entity.ofExpectedPayment(expectedPayment))

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(ledgerTransaction: LedgerTransaction) =
            entity(Entity.ofLedgerTransaction(ledgerTransaction))

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(transaction: Transaction) = entity(Entity.ofTransaction(transaction))

        /**
         * An object with type as indicated by `entity_type`. This is the result object that is
         * generated by performing the requested action on the provided input `request_params`.
         */
        fun entity(bulkError: Entity.BulkError) = entity(Entity.ofBulkError(bulkError))

        /** Unique identifier for the result entity object. */
        fun entityId(entityId: String) = entityId(JsonField.of(entityId))

        /** Unique identifier for the result entity object. */
        fun entityId(entityId: JsonField<String>) = apply { this.entityId = entityId }

        /**
         * The type of the result entity object. For a successful bulk result, this is the same as
         * the `resource_type` of the bulk request. For a failed bulk result, this is always
         * bulk_error
         */
        fun entityType(entityType: EntityType) = entityType(JsonField.of(entityType))

        /**
         * The type of the result entity object. For a successful bulk result, this is the same as
         * the `resource_type` of the bulk request. For a failed bulk result, this is always
         * bulk_error
         */
        fun entityType(entityType: JsonField<EntityType>) = apply { this.entityType = entityType }

        /**
         * This field will be true if this object exists in the live environment or false if it
         * exists in the test environment.
         */
        fun liveMode(liveMode: Boolean) = liveMode(JsonField.of(liveMode))

        /**
         * This field will be true if this object exists in the live environment or false if it
         * exists in the test environment.
         */
        fun liveMode(liveMode: JsonField<Boolean>) = apply { this.liveMode = liveMode }

        fun object_(object_: String) = object_(JsonField.of(object_))

        fun object_(object_: JsonField<String>) = apply { this.object_ = object_ }

        /**
         * Unique identifier for the request that created this bulk result. This is the ID of the
         * bulk request when `request_type` is bulk_request
         */
        fun requestId(requestId: String) = requestId(JsonField.of(requestId))

        /**
         * Unique identifier for the request that created this bulk result. This is the ID of the
         * bulk request when `request_type` is bulk_request
         */
        fun requestId(requestId: JsonField<String>) = apply { this.requestId = requestId }

        /**
         * An optional object that contains the provided input params for the request that created
         * this result. This is an item in the `resources` array for the bulk_request
         */
        fun requestParams(requestParams: RequestParams?) =
            requestParams(JsonField.ofNullable(requestParams))

        /**
         * An optional object that contains the provided input params for the request that created
         * this result. This is an item in the `resources` array for the bulk_request
         */
        fun requestParams(requestParams: JsonField<RequestParams>) = apply {
            this.requestParams = requestParams
        }

        /**
         * The type of the request that created this result. bulk_request is the only supported
         * `request_type`
         */
        fun requestType(requestType: RequestType) = requestType(JsonField.of(requestType))

        /**
         * The type of the request that created this result. bulk_request is the only supported
         * `request_type`
         */
        fun requestType(requestType: JsonField<RequestType>) = apply {
            this.requestType = requestType
        }

        /** One of successful or failed. */
        fun status(status: Status) = status(JsonField.of(status))

        /** One of successful or failed. */
        fun status(status: JsonField<Status>) = apply { this.status = status }

        fun updatedAt(updatedAt: OffsetDateTime) = updatedAt(JsonField.of(updatedAt))

        fun updatedAt(updatedAt: JsonField<OffsetDateTime>) = apply { this.updatedAt = updatedAt }

        fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.clear()
            putAllAdditionalProperties(additionalProperties)
        }

        fun putAdditionalProperty(key: String, value: JsonValue) = apply {
            additionalProperties.put(key, value)
        }

        fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
            this.additionalProperties.putAll(additionalProperties)
        }

        fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

        fun removeAllAdditionalProperties(keys: Set<String>) = apply {
            keys.forEach(::removeAdditionalProperty)
        }

        fun build(): BulkResult =
            BulkResult(
                checkNotNull(id) { "`id` is required but was not set" },
                checkNotNull(createdAt) { "`createdAt` is required but was not set" },
                checkNotNull(entity) { "`entity` is required but was not set" },
                checkNotNull(entityId) { "`entityId` is required but was not set" },
                checkNotNull(entityType) { "`entityType` is required but was not set" },
                checkNotNull(liveMode) { "`liveMode` is required but was not set" },
                checkNotNull(object_) { "`object_` is required but was not set" },
                checkNotNull(requestId) { "`requestId` is required but was not set" },
                checkNotNull(requestParams) { "`requestParams` is required but was not set" },
                checkNotNull(requestType) { "`requestType` is required but was not set" },
                checkNotNull(status) { "`status` is required but was not set" },
                checkNotNull(updatedAt) { "`updatedAt` is required but was not set" },
                additionalProperties.toImmutable(),
            )
    }

    /**
     * An object with type as indicated by `entity_type`. This is the result object that is
     * generated by performing the requested action on the provided input `request_params`.
     */
    @JsonDeserialize(using = Entity.Deserializer::class)
    @JsonSerialize(using = Entity.Serializer::class)
    class Entity
    private constructor(
        private val paymentOrder: PaymentOrder? = null,
        private val expectedPayment: ExpectedPayment? = null,
        private val ledgerTransaction: LedgerTransaction? = null,
        private val transaction: Transaction? = null,
        private val bulkError: BulkError? = null,
        private val _json: JsonValue? = null,
    ) {

        private var validated: Boolean = false

        fun paymentOrder(): PaymentOrder? = paymentOrder

        fun expectedPayment(): ExpectedPayment? = expectedPayment

        fun ledgerTransaction(): LedgerTransaction? = ledgerTransaction

        fun transaction(): Transaction? = transaction

        fun bulkError(): BulkError? = bulkError

        fun isPaymentOrder(): Boolean = paymentOrder != null

        fun isExpectedPayment(): Boolean = expectedPayment != null

        fun isLedgerTransaction(): Boolean = ledgerTransaction != null

        fun isTransaction(): Boolean = transaction != null

        fun isBulkError(): Boolean = bulkError != null

        fun asPaymentOrder(): PaymentOrder = paymentOrder.getOrThrow("paymentOrder")

        fun asExpectedPayment(): ExpectedPayment = expectedPayment.getOrThrow("expectedPayment")

        fun asLedgerTransaction(): LedgerTransaction =
            ledgerTransaction.getOrThrow("ledgerTransaction")

        fun asTransaction(): Transaction = transaction.getOrThrow("transaction")

        fun asBulkError(): BulkError = bulkError.getOrThrow("bulkError")

        fun _json(): JsonValue? = _json

        fun <T> accept(visitor: Visitor<T>): T {
            return when {
                paymentOrder != null -> visitor.visitPaymentOrder(paymentOrder)
                expectedPayment != null -> visitor.visitExpectedPayment(expectedPayment)
                ledgerTransaction != null -> visitor.visitLedgerTransaction(ledgerTransaction)
                transaction != null -> visitor.visitTransaction(transaction)
                bulkError != null -> visitor.visitBulkError(bulkError)
                else -> visitor.unknown(_json)
            }
        }

        fun validate(): Entity = apply {
            if (!validated) {
                if (
                    paymentOrder == null &&
                        expectedPayment == null &&
                        ledgerTransaction == null &&
                        transaction == null &&
                        bulkError == null
                ) {
                    throw ModernTreasuryInvalidDataException("Unknown Entity: $_json")
                }
                paymentOrder?.validate()
                expectedPayment?.validate()
                ledgerTransaction?.validate()
                transaction?.validate()
                bulkError?.validate()
                validated = true
            }
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Entity && paymentOrder == other.paymentOrder && expectedPayment == other.expectedPayment && ledgerTransaction == other.ledgerTransaction && transaction == other.transaction && bulkError == other.bulkError /* spotless:on */
        }

        override fun hashCode(): Int = /* spotless:off */ Objects.hash(paymentOrder, expectedPayment, ledgerTransaction, transaction, bulkError) /* spotless:on */

        override fun toString(): String =
            when {
                paymentOrder != null -> "Entity{paymentOrder=$paymentOrder}"
                expectedPayment != null -> "Entity{expectedPayment=$expectedPayment}"
                ledgerTransaction != null -> "Entity{ledgerTransaction=$ledgerTransaction}"
                transaction != null -> "Entity{transaction=$transaction}"
                bulkError != null -> "Entity{bulkError=$bulkError}"
                _json != null -> "Entity{_unknown=$_json}"
                else -> throw IllegalStateException("Invalid Entity")
            }

        companion object {

            fun ofPaymentOrder(paymentOrder: PaymentOrder) = Entity(paymentOrder = paymentOrder)

            fun ofExpectedPayment(expectedPayment: ExpectedPayment) =
                Entity(expectedPayment = expectedPayment)

            fun ofLedgerTransaction(ledgerTransaction: LedgerTransaction) =
                Entity(ledgerTransaction = ledgerTransaction)

            fun ofTransaction(transaction: Transaction) = Entity(transaction = transaction)

            fun ofBulkError(bulkError: BulkError) = Entity(bulkError = bulkError)
        }

        interface Visitor<out T> {

            fun visitPaymentOrder(paymentOrder: PaymentOrder): T

            fun visitExpectedPayment(expectedPayment: ExpectedPayment): T

            fun visitLedgerTransaction(ledgerTransaction: LedgerTransaction): T

            fun visitTransaction(transaction: Transaction): T

            fun visitBulkError(bulkError: BulkError): T

            fun unknown(json: JsonValue?): T {
                throw ModernTreasuryInvalidDataException("Unknown Entity: $json")
            }
        }

        class Deserializer : BaseDeserializer<Entity>(Entity::class) {

            override fun ObjectCodec.deserialize(node: JsonNode): Entity {
                val json = JsonValue.fromJsonNode(node)

                tryDeserialize(node, jacksonTypeRef<PaymentOrder>()) { it.validate() }
                    ?.let {
                        return Entity(paymentOrder = it, _json = json)
                    }
                tryDeserialize(node, jacksonTypeRef<ExpectedPayment>()) { it.validate() }
                    ?.let {
                        return Entity(expectedPayment = it, _json = json)
                    }
                tryDeserialize(node, jacksonTypeRef<LedgerTransaction>()) { it.validate() }
                    ?.let {
                        return Entity(ledgerTransaction = it, _json = json)
                    }
                tryDeserialize(node, jacksonTypeRef<Transaction>()) { it.validate() }
                    ?.let {
                        return Entity(transaction = it, _json = json)
                    }
                tryDeserialize(node, jacksonTypeRef<BulkError>()) { it.validate() }
                    ?.let {
                        return Entity(bulkError = it, _json = json)
                    }

                return Entity(_json = json)
            }
        }

        class Serializer : BaseSerializer<Entity>(Entity::class) {

            override fun serialize(
                value: Entity,
                generator: JsonGenerator,
                provider: SerializerProvider
            ) {
                when {
                    value.paymentOrder != null -> generator.writeObject(value.paymentOrder)
                    value.expectedPayment != null -> generator.writeObject(value.expectedPayment)
                    value.ledgerTransaction != null ->
                        generator.writeObject(value.ledgerTransaction)
                    value.transaction != null -> generator.writeObject(value.transaction)
                    value.bulkError != null -> generator.writeObject(value.bulkError)
                    value._json != null -> generator.writeObject(value._json)
                    else -> throw IllegalStateException("Invalid Entity")
                }
            }
        }

        @NoAutoDetect
        class BulkError
        @JsonCreator
        private constructor(
            @JsonProperty("id")
            @ExcludeMissing
            private val id: JsonField<String> = JsonMissing.of(),
            @JsonProperty("created_at")
            @ExcludeMissing
            private val createdAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonProperty("live_mode")
            @ExcludeMissing
            private val liveMode: JsonField<Boolean> = JsonMissing.of(),
            @JsonProperty("object")
            @ExcludeMissing
            private val object_: JsonField<String> = JsonMissing.of(),
            @JsonProperty("request_errors")
            @ExcludeMissing
            private val requestErrors: JsonField<List<RequestError>> = JsonMissing.of(),
            @JsonProperty("updated_at")
            @ExcludeMissing
            private val updatedAt: JsonField<OffsetDateTime> = JsonMissing.of(),
            @JsonAnySetter
            private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
        ) {

            fun id(): String = id.getRequired("id")

            fun createdAt(): OffsetDateTime = createdAt.getRequired("created_at")

            /**
             * This field will be true if this object exists in the live environment or false if it
             * exists in the test environment.
             */
            fun liveMode(): Boolean = liveMode.getRequired("live_mode")

            fun object_(): String = object_.getRequired("object")

            fun requestErrors(): List<RequestError> = requestErrors.getRequired("request_errors")

            fun updatedAt(): OffsetDateTime = updatedAt.getRequired("updated_at")

            @JsonProperty("id") @ExcludeMissing fun _id(): JsonField<String> = id

            @JsonProperty("created_at")
            @ExcludeMissing
            fun _createdAt(): JsonField<OffsetDateTime> = createdAt

            /**
             * This field will be true if this object exists in the live environment or false if it
             * exists in the test environment.
             */
            @JsonProperty("live_mode")
            @ExcludeMissing
            fun _liveMode(): JsonField<Boolean> = liveMode

            @JsonProperty("object") @ExcludeMissing fun _object_(): JsonField<String> = object_

            @JsonProperty("request_errors")
            @ExcludeMissing
            fun _requestErrors(): JsonField<List<RequestError>> = requestErrors

            @JsonProperty("updated_at")
            @ExcludeMissing
            fun _updatedAt(): JsonField<OffsetDateTime> = updatedAt

            @JsonAnyGetter
            @ExcludeMissing
            fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

            private var validated: Boolean = false

            fun validate(): BulkError = apply {
                if (!validated) {
                    id()
                    createdAt()
                    liveMode()
                    object_()
                    requestErrors().forEach { it.validate() }
                    updatedAt()
                    validated = true
                }
            }

            fun toBuilder() = Builder().from(this)

            companion object {

                fun builder() = Builder()
            }

            class Builder {

                private var id: JsonField<String>? = null
                private var createdAt: JsonField<OffsetDateTime>? = null
                private var liveMode: JsonField<Boolean>? = null
                private var object_: JsonField<String>? = null
                private var requestErrors: JsonField<MutableList<RequestError>>? = null
                private var updatedAt: JsonField<OffsetDateTime>? = null
                private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                internal fun from(bulkError: BulkError) = apply {
                    id = bulkError.id
                    createdAt = bulkError.createdAt
                    liveMode = bulkError.liveMode
                    object_ = bulkError.object_
                    requestErrors = bulkError.requestErrors.map { it.toMutableList() }
                    updatedAt = bulkError.updatedAt
                    additionalProperties = bulkError.additionalProperties.toMutableMap()
                }

                fun id(id: String) = id(JsonField.of(id))

                fun id(id: JsonField<String>) = apply { this.id = id }

                fun createdAt(createdAt: OffsetDateTime) = createdAt(JsonField.of(createdAt))

                fun createdAt(createdAt: JsonField<OffsetDateTime>) = apply {
                    this.createdAt = createdAt
                }

                /**
                 * This field will be true if this object exists in the live environment or false if
                 * it exists in the test environment.
                 */
                fun liveMode(liveMode: Boolean) = liveMode(JsonField.of(liveMode))

                /**
                 * This field will be true if this object exists in the live environment or false if
                 * it exists in the test environment.
                 */
                fun liveMode(liveMode: JsonField<Boolean>) = apply { this.liveMode = liveMode }

                fun object_(object_: String) = object_(JsonField.of(object_))

                fun object_(object_: JsonField<String>) = apply { this.object_ = object_ }

                fun requestErrors(requestErrors: List<RequestError>) =
                    requestErrors(JsonField.of(requestErrors))

                fun requestErrors(requestErrors: JsonField<List<RequestError>>) = apply {
                    this.requestErrors = requestErrors.map { it.toMutableList() }
                }

                fun addRequestError(requestError: RequestError) = apply {
                    requestErrors =
                        (requestErrors ?: JsonField.of(mutableListOf())).apply {
                            (asKnown()
                                    ?: throw IllegalStateException(
                                        "Field was set to non-list type: ${javaClass.simpleName}"
                                    ))
                                .add(requestError)
                        }
                }

                fun updatedAt(updatedAt: OffsetDateTime) = updatedAt(JsonField.of(updatedAt))

                fun updatedAt(updatedAt: JsonField<OffsetDateTime>) = apply {
                    this.updatedAt = updatedAt
                }

                fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                    this.additionalProperties.clear()
                    putAllAdditionalProperties(additionalProperties)
                }

                fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                    additionalProperties.put(key, value)
                }

                fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                    apply {
                        this.additionalProperties.putAll(additionalProperties)
                    }

                fun removeAdditionalProperty(key: String) = apply {
                    additionalProperties.remove(key)
                }

                fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                    keys.forEach(::removeAdditionalProperty)
                }

                fun build(): BulkError =
                    BulkError(
                        checkNotNull(id) { "`id` is required but was not set" },
                        checkNotNull(createdAt) { "`createdAt` is required but was not set" },
                        checkNotNull(liveMode) { "`liveMode` is required but was not set" },
                        checkNotNull(object_) { "`object_` is required but was not set" },
                        checkNotNull(requestErrors) {
                                "`requestErrors` is required but was not set"
                            }
                            .map { it.toImmutable() },
                        checkNotNull(updatedAt) { "`updatedAt` is required but was not set" },
                        additionalProperties.toImmutable(),
                    )
            }

            @NoAutoDetect
            class RequestError
            @JsonCreator
            private constructor(
                @JsonProperty("code")
                @ExcludeMissing
                private val code: JsonField<String> = JsonMissing.of(),
                @JsonProperty("message")
                @ExcludeMissing
                private val message: JsonField<String> = JsonMissing.of(),
                @JsonProperty("parameter")
                @ExcludeMissing
                private val parameter: JsonField<String> = JsonMissing.of(),
                @JsonAnySetter
                private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
            ) {

                fun code(): String? = code.getNullable("code")

                fun message(): String? = message.getNullable("message")

                fun parameter(): String? = parameter.getNullable("parameter")

                @JsonProperty("code") @ExcludeMissing fun _code(): JsonField<String> = code

                @JsonProperty("message") @ExcludeMissing fun _message(): JsonField<String> = message

                @JsonProperty("parameter")
                @ExcludeMissing
                fun _parameter(): JsonField<String> = parameter

                @JsonAnyGetter
                @ExcludeMissing
                fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

                private var validated: Boolean = false

                fun validate(): RequestError = apply {
                    if (!validated) {
                        code()
                        message()
                        parameter()
                        validated = true
                    }
                }

                fun toBuilder() = Builder().from(this)

                companion object {

                    fun builder() = Builder()
                }

                class Builder {

                    private var code: JsonField<String> = JsonMissing.of()
                    private var message: JsonField<String> = JsonMissing.of()
                    private var parameter: JsonField<String> = JsonMissing.of()
                    private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

                    internal fun from(requestError: RequestError) = apply {
                        code = requestError.code
                        message = requestError.message
                        parameter = requestError.parameter
                        additionalProperties = requestError.additionalProperties.toMutableMap()
                    }

                    fun code(code: String) = code(JsonField.of(code))

                    fun code(code: JsonField<String>) = apply { this.code = code }

                    fun message(message: String) = message(JsonField.of(message))

                    fun message(message: JsonField<String>) = apply { this.message = message }

                    fun parameter(parameter: String) = parameter(JsonField.of(parameter))

                    fun parameter(parameter: JsonField<String>) = apply {
                        this.parameter = parameter
                    }

                    fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                        this.additionalProperties.clear()
                        putAllAdditionalProperties(additionalProperties)
                    }

                    fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                        additionalProperties.put(key, value)
                    }

                    fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) =
                        apply {
                            this.additionalProperties.putAll(additionalProperties)
                        }

                    fun removeAdditionalProperty(key: String) = apply {
                        additionalProperties.remove(key)
                    }

                    fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                        keys.forEach(::removeAdditionalProperty)
                    }

                    fun build(): RequestError =
                        RequestError(
                            code,
                            message,
                            parameter,
                            additionalProperties.toImmutable(),
                        )
                }

                override fun equals(other: Any?): Boolean {
                    if (this === other) {
                        return true
                    }

                    return /* spotless:off */ other is RequestError && code == other.code && message == other.message && parameter == other.parameter && additionalProperties == other.additionalProperties /* spotless:on */
                }

                /* spotless:off */
                private val hashCode: Int by lazy { Objects.hash(code, message, parameter, additionalProperties) }
                /* spotless:on */

                override fun hashCode(): Int = hashCode

                override fun toString() =
                    "RequestError{code=$code, message=$message, parameter=$parameter, additionalProperties=$additionalProperties}"
            }

            override fun equals(other: Any?): Boolean {
                if (this === other) {
                    return true
                }

                return /* spotless:off */ other is BulkError && id == other.id && createdAt == other.createdAt && liveMode == other.liveMode && object_ == other.object_ && requestErrors == other.requestErrors && updatedAt == other.updatedAt && additionalProperties == other.additionalProperties /* spotless:on */
            }

            /* spotless:off */
            private val hashCode: Int by lazy { Objects.hash(id, createdAt, liveMode, object_, requestErrors, updatedAt, additionalProperties) }
            /* spotless:on */

            override fun hashCode(): Int = hashCode

            override fun toString() =
                "BulkError{id=$id, createdAt=$createdAt, liveMode=$liveMode, object_=$object_, requestErrors=$requestErrors, updatedAt=$updatedAt, additionalProperties=$additionalProperties}"
        }
    }

    class EntityType
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            val PAYMENT_ORDER = of("payment_order")

            val LEDGER_TRANSACTION = of("ledger_transaction")

            val TRANSACTION = of("transaction")

            val EXPECTED_PAYMENT = of("expected_payment")

            val BULK_ERROR = of("bulk_error")

            fun of(value: String) = EntityType(JsonField.of(value))
        }

        enum class Known {
            PAYMENT_ORDER,
            LEDGER_TRANSACTION,
            TRANSACTION,
            EXPECTED_PAYMENT,
            BULK_ERROR,
        }

        enum class Value {
            PAYMENT_ORDER,
            LEDGER_TRANSACTION,
            TRANSACTION,
            EXPECTED_PAYMENT,
            BULK_ERROR,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                PAYMENT_ORDER -> Value.PAYMENT_ORDER
                LEDGER_TRANSACTION -> Value.LEDGER_TRANSACTION
                TRANSACTION -> Value.TRANSACTION
                EXPECTED_PAYMENT -> Value.EXPECTED_PAYMENT
                BULK_ERROR -> Value.BULK_ERROR
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                PAYMENT_ORDER -> Known.PAYMENT_ORDER
                LEDGER_TRANSACTION -> Known.LEDGER_TRANSACTION
                TRANSACTION -> Known.TRANSACTION
                EXPECTED_PAYMENT -> Known.EXPECTED_PAYMENT
                BULK_ERROR -> Known.BULK_ERROR
                else -> throw ModernTreasuryInvalidDataException("Unknown EntityType: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is EntityType && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    /**
     * An optional object that contains the provided input params for the request that created this
     * result. This is an item in the `resources` array for the bulk_request
     */
    @NoAutoDetect
    class RequestParams
    @JsonCreator
    private constructor(
        @JsonAnySetter
        private val additionalProperties: Map<String, JsonValue> = immutableEmptyMap(),
    ) {

        @JsonAnyGetter
        @ExcludeMissing
        fun _additionalProperties(): Map<String, JsonValue> = additionalProperties

        private var validated: Boolean = false

        fun validate(): RequestParams = apply {
            if (!validated) {
                validated = true
            }
        }

        fun toBuilder() = Builder().from(this)

        companion object {

            fun builder() = Builder()
        }

        class Builder {

            private var additionalProperties: MutableMap<String, JsonValue> = mutableMapOf()

            internal fun from(requestParams: RequestParams) = apply {
                additionalProperties = requestParams.additionalProperties.toMutableMap()
            }

            fun additionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.clear()
                putAllAdditionalProperties(additionalProperties)
            }

            fun putAdditionalProperty(key: String, value: JsonValue) = apply {
                additionalProperties.put(key, value)
            }

            fun putAllAdditionalProperties(additionalProperties: Map<String, JsonValue>) = apply {
                this.additionalProperties.putAll(additionalProperties)
            }

            fun removeAdditionalProperty(key: String) = apply { additionalProperties.remove(key) }

            fun removeAllAdditionalProperties(keys: Set<String>) = apply {
                keys.forEach(::removeAdditionalProperty)
            }

            fun build(): RequestParams = RequestParams(additionalProperties.toImmutable())
        }

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RequestParams && additionalProperties == other.additionalProperties /* spotless:on */
        }

        /* spotless:off */
        private val hashCode: Int by lazy { Objects.hash(additionalProperties) }
        /* spotless:on */

        override fun hashCode(): Int = hashCode

        override fun toString() = "RequestParams{additionalProperties=$additionalProperties}"
    }

    class RequestType
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            val BULK_REQUEST = of("bulk_request")

            fun of(value: String) = RequestType(JsonField.of(value))
        }

        enum class Known {
            BULK_REQUEST,
        }

        enum class Value {
            BULK_REQUEST,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                BULK_REQUEST -> Value.BULK_REQUEST
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                BULK_REQUEST -> Known.BULK_REQUEST
                else -> throw ModernTreasuryInvalidDataException("Unknown RequestType: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is RequestType && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    class Status
    @JsonCreator
    private constructor(
        private val value: JsonField<String>,
    ) : Enum {

        @com.fasterxml.jackson.annotation.JsonValue fun _value(): JsonField<String> = value

        companion object {

            val PENDING = of("pending")

            val SUCCESSFUL = of("successful")

            val FAILED = of("failed")

            fun of(value: String) = Status(JsonField.of(value))
        }

        enum class Known {
            PENDING,
            SUCCESSFUL,
            FAILED,
        }

        enum class Value {
            PENDING,
            SUCCESSFUL,
            FAILED,
            _UNKNOWN,
        }

        fun value(): Value =
            when (this) {
                PENDING -> Value.PENDING
                SUCCESSFUL -> Value.SUCCESSFUL
                FAILED -> Value.FAILED
                else -> Value._UNKNOWN
            }

        fun known(): Known =
            when (this) {
                PENDING -> Known.PENDING
                SUCCESSFUL -> Known.SUCCESSFUL
                FAILED -> Known.FAILED
                else -> throw ModernTreasuryInvalidDataException("Unknown Status: $value")
            }

        fun asString(): String = _value().asStringOrThrow()

        override fun equals(other: Any?): Boolean {
            if (this === other) {
                return true
            }

            return /* spotless:off */ other is Status && value == other.value /* spotless:on */
        }

        override fun hashCode() = value.hashCode()

        override fun toString() = value.toString()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }

        return /* spotless:off */ other is BulkResult && id == other.id && createdAt == other.createdAt && entity == other.entity && entityId == other.entityId && entityType == other.entityType && liveMode == other.liveMode && object_ == other.object_ && requestId == other.requestId && requestParams == other.requestParams && requestType == other.requestType && status == other.status && updatedAt == other.updatedAt && additionalProperties == other.additionalProperties /* spotless:on */
    }

    /* spotless:off */
    private val hashCode: Int by lazy { Objects.hash(id, createdAt, entity, entityId, entityType, liveMode, object_, requestId, requestParams, requestType, status, updatedAt, additionalProperties) }
    /* spotless:on */

    override fun hashCode(): Int = hashCode

    override fun toString() =
        "BulkResult{id=$id, createdAt=$createdAt, entity=$entity, entityId=$entityId, entityType=$entityType, liveMode=$liveMode, object_=$object_, requestId=$requestId, requestParams=$requestParams, requestType=$requestType, status=$status, updatedAt=$updatedAt, additionalProperties=$additionalProperties}"
}
