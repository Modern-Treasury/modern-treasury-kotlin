// File generated from our OpenAPI spec by Stainless.

package com.moderntreasury.api.models

import com.moderntreasury.api.models.*
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class InvoiceCreateParamsTest {

    @Test
    fun createInvoiceCreateParams() {
        InvoiceCreateParams.builder()
            .counterpartyId("counterparty_id")
            .dueDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
            .originatingAccountId("originating_account_id")
            .autoAdvance(true)
            .contactDetails(
                listOf(
                    InvoiceCreateParams.ContactDetail.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .contactIdentifier("contact_identifier")
                        .contactIdentifierType(
                            InvoiceCreateParams.ContactDetail.ContactIdentifierType.EMAIL
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .liveMode(true)
                        .object_("object")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
            .counterpartyBillingAddress(
                InvoiceCreateParams.CounterpartyBillingAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
            .counterpartyShippingAddress(
                InvoiceCreateParams.CounterpartyShippingAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
            .currency(Currency.AED)
            .description("description")
            .fallbackPaymentMethod("fallback_payment_method")
            .ingestLedgerEntries(true)
            .invoiceLineItems(
                listOf(
                    InvoiceCreateParams.InvoiceLineItemCreateRequest.builder()
                        .name("name")
                        .unitAmount(0L)
                        .description("description")
                        .direction("direction")
                        .metadata(
                            InvoiceCreateParams.InvoiceLineItemCreateRequest.Metadata.builder()
                                .build()
                        )
                        .quantity(0L)
                        .unitAmountDecimal("unit_amount_decimal")
                        .build()
                )
            )
            .invoicerAddress(
                InvoiceCreateParams.InvoicerAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
            .ledgerAccountSettlementId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
            .metadata(InvoiceCreateParams.Metadata.builder().build())
            .notificationEmailAddresses(listOf("string"))
            .notificationsEnabled(true)
            .paymentEffectiveDate(LocalDate.parse("2019-12-27"))
            .paymentMethod(InvoiceCreateParams.PaymentMethod.UI)
            .paymentType(PaymentOrderType.ACH)
            .receivingAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
            .recipientEmail("recipient_email")
            .recipientName("recipient_name")
            .remindAfterOverdueDays(listOf(0L))
            .virtualAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
            .build()
    }

    @Test
    fun getBody() {
        val params =
            InvoiceCreateParams.builder()
                .counterpartyId("counterparty_id")
                .dueDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .originatingAccountId("originating_account_id")
                .autoAdvance(true)
                .contactDetails(
                    listOf(
                        InvoiceCreateParams.ContactDetail.builder()
                            .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                            .contactIdentifier("contact_identifier")
                            .contactIdentifierType(
                                InvoiceCreateParams.ContactDetail.ContactIdentifierType.EMAIL
                            )
                            .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .liveMode(true)
                            .object_("object")
                            .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                            .build()
                    )
                )
                .counterpartyBillingAddress(
                    InvoiceCreateParams.CounterpartyBillingAddress.builder()
                        .country("country")
                        .line1("line1")
                        .locality("locality")
                        .postalCode("postal_code")
                        .region("region")
                        .line2("line2")
                        .build()
                )
                .counterpartyShippingAddress(
                    InvoiceCreateParams.CounterpartyShippingAddress.builder()
                        .country("country")
                        .line1("line1")
                        .locality("locality")
                        .postalCode("postal_code")
                        .region("region")
                        .line2("line2")
                        .build()
                )
                .currency(Currency.AED)
                .description("description")
                .fallbackPaymentMethod("fallback_payment_method")
                .ingestLedgerEntries(true)
                .invoiceLineItems(
                    listOf(
                        InvoiceCreateParams.InvoiceLineItemCreateRequest.builder()
                            .name("name")
                            .unitAmount(0L)
                            .description("description")
                            .direction("direction")
                            .metadata(
                                InvoiceCreateParams.InvoiceLineItemCreateRequest.Metadata.builder()
                                    .build()
                            )
                            .quantity(0L)
                            .unitAmountDecimal("unit_amount_decimal")
                            .build()
                    )
                )
                .invoicerAddress(
                    InvoiceCreateParams.InvoicerAddress.builder()
                        .country("country")
                        .line1("line1")
                        .locality("locality")
                        .postalCode("postal_code")
                        .region("region")
                        .line2("line2")
                        .build()
                )
                .ledgerAccountSettlementId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .metadata(InvoiceCreateParams.Metadata.builder().build())
                .notificationEmailAddresses(listOf("string"))
                .notificationsEnabled(true)
                .paymentEffectiveDate(LocalDate.parse("2019-12-27"))
                .paymentMethod(InvoiceCreateParams.PaymentMethod.UI)
                .paymentType(PaymentOrderType.ACH)
                .receivingAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .recipientEmail("recipient_email")
                .recipientName("recipient_name")
                .remindAfterOverdueDays(listOf(0L))
                .virtualAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.counterpartyId()).isEqualTo("counterparty_id")
        assertThat(body.dueDate()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(body.originatingAccountId()).isEqualTo("originating_account_id")
        assertThat(body.autoAdvance()).isEqualTo(true)
        assertThat(body.contactDetails())
            .isEqualTo(
                listOf(
                    InvoiceCreateParams.ContactDetail.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .contactIdentifier("contact_identifier")
                        .contactIdentifierType(
                            InvoiceCreateParams.ContactDetail.ContactIdentifierType.EMAIL
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .liveMode(true)
                        .object_("object")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
            )
        assertThat(body.counterpartyBillingAddress())
            .isEqualTo(
                InvoiceCreateParams.CounterpartyBillingAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
        assertThat(body.counterpartyShippingAddress())
            .isEqualTo(
                InvoiceCreateParams.CounterpartyShippingAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
        assertThat(body.currency()).isEqualTo(Currency.AED)
        assertThat(body.description()).isEqualTo("description")
        assertThat(body.fallbackPaymentMethod()).isEqualTo("fallback_payment_method")
        assertThat(body.ingestLedgerEntries()).isEqualTo(true)
        assertThat(body.invoiceLineItems())
            .isEqualTo(
                listOf(
                    InvoiceCreateParams.InvoiceLineItemCreateRequest.builder()
                        .name("name")
                        .unitAmount(0L)
                        .description("description")
                        .direction("direction")
                        .metadata(
                            InvoiceCreateParams.InvoiceLineItemCreateRequest.Metadata.builder()
                                .build()
                        )
                        .quantity(0L)
                        .unitAmountDecimal("unit_amount_decimal")
                        .build()
                )
            )
        assertThat(body.invoicerAddress())
            .isEqualTo(
                InvoiceCreateParams.InvoicerAddress.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .line2("line2")
                    .build()
            )
        assertThat(body.ledgerAccountSettlementId())
            .isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(body.metadata()).isEqualTo(InvoiceCreateParams.Metadata.builder().build())
        assertThat(body.notificationEmailAddresses()).isEqualTo(listOf("string"))
        assertThat(body.notificationsEnabled()).isEqualTo(true)
        assertThat(body.paymentEffectiveDate()).isEqualTo(LocalDate.parse("2019-12-27"))
        assertThat(body.paymentMethod()).isEqualTo(InvoiceCreateParams.PaymentMethod.UI)
        assertThat(body.paymentType()).isEqualTo(PaymentOrderType.ACH)
        assertThat(body.receivingAccountId()).isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(body.recipientEmail()).isEqualTo("recipient_email")
        assertThat(body.recipientName()).isEqualTo("recipient_name")
        assertThat(body.remindAfterOverdueDays()).isEqualTo(listOf(0L))
        assertThat(body.virtualAccountId()).isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
    }

    @Test
    fun getBodyWithoutOptionalFields() {
        val params =
            InvoiceCreateParams.builder()
                .counterpartyId("counterparty_id")
                .dueDate(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .originatingAccountId("originating_account_id")
                .build()
        val body = params.getBody()
        assertThat(body).isNotNull
        assertThat(body.counterpartyId()).isEqualTo("counterparty_id")
        assertThat(body.dueDate()).isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(body.originatingAccountId()).isEqualTo("originating_account_id")
    }
}
