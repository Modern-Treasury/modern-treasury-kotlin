// File generated from our OpenAPI spec by Stainless.

package com.moderntreasury.api.models

import com.fasterxml.jackson.module.kotlin.jacksonTypeRef
import com.moderntreasury.api.core.JsonValue
import com.moderntreasury.api.core.jsonMapper
import java.time.LocalDate
import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

internal class ChildLegalEntityCreateTest {

    @Test
    fun create() {
        val childLegalEntityCreate =
            ChildLegalEntityCreate.builder()
                .addAddress(
                    LegalEntityAddressCreateRequest.builder()
                        .country("country")
                        .line1("line1")
                        .locality("locality")
                        .postalCode("postal_code")
                        .region("region")
                        .addAddressType(LegalEntityAddressCreateRequest.AddressType.BUSINESS)
                        .line2("line2")
                        .build()
                )
                .bankSettings(
                    BankSettings.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .backupWithholdingPercentage(0L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .enableBackupWithholding(true)
                        .liveMode(true)
                        .object_("object")
                        .privacyOptOut(true)
                        .regulationO(true)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .businessName("business_name")
                .citizenshipCountry("citizenship_country")
                .complianceDetails(
                    LegalEntityComplianceDetail.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .issuer("issuer")
                        .liveMode(true)
                        .object_("object")
                        .tokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .tokenIssuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .tokenUrl("token_url")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .entityValidated(true)
                        .validatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .dateFormed(LocalDate.parse("2019-12-27"))
                .dateOfBirth(LocalDate.parse("2019-12-27"))
                .addDoingBusinessAsName("string")
                .email("email")
                .firstName("first_name")
                .addIdentification(
                    IdentificationCreateRequest.builder()
                        .idNumber("id_number")
                        .idType(IdentificationCreateRequest.IdType.AR_CUIL)
                        .expirationDate(LocalDate.parse("2019-12-27"))
                        .issuingCountry("issuing_country")
                        .issuingRegion("issuing_region")
                        .build()
                )
                .addIndustryClassification(
                    LegalEntityIndustryClassification.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .addClassificationCode("string")
                        .classificationType(
                            LegalEntityIndustryClassification.ClassificationType.ANZSIC
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .liveMode(true)
                        .object_("object")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .lastName("last_name")
                .legalEntityType(ChildLegalEntityCreate.LegalEntityType.BUSINESS)
                .legalStructure(ChildLegalEntityCreate.LegalStructure.CORPORATION)
                .metadata(
                    ChildLegalEntityCreate.Metadata.builder()
                        .putAdditionalProperty("key", JsonValue.from("value"))
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .putAdditionalProperty("modern", JsonValue.from("treasury"))
                        .build()
                )
                .middleName("middle_name")
                .addPhoneNumber(
                    ChildLegalEntityCreate.PhoneNumber.builder().phoneNumber("phone_number").build()
                )
                .politicallyExposedPerson(true)
                .preferredName("preferred_name")
                .prefix("prefix")
                .riskRating(ChildLegalEntityCreate.RiskRating.LOW)
                .suffix("suffix")
                .wealthAndEmploymentDetails(
                    WealthAndEmploymentDetails.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .annualIncome(0L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .employerCountry("employer_country")
                        .employerName("employer_name")
                        .employerState("employer_state")
                        .employmentStatus(WealthAndEmploymentDetails.EmploymentStatus.EMPLOYED)
                        .incomeCountry("income_country")
                        .incomeSource(WealthAndEmploymentDetails.IncomeSource.FAMILY_SUPPORT)
                        .incomeState("income_state")
                        .industry(WealthAndEmploymentDetails.Industry.ACCOUNTING)
                        .liveMode(true)
                        .object_("object")
                        .occupation(WealthAndEmploymentDetails.Occupation.CONSULTING)
                        .sourceOfFunds(WealthAndEmploymentDetails.SourceOfFunds.ALIMONY)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .wealthSource(WealthAndEmploymentDetails.WealthSource.BUSINESS_SALE)
                        .build()
                )
                .website("website")
                .build()

        assertThat(childLegalEntityCreate.addresses())
            .containsExactly(
                LegalEntityAddressCreateRequest.builder()
                    .country("country")
                    .line1("line1")
                    .locality("locality")
                    .postalCode("postal_code")
                    .region("region")
                    .addAddressType(LegalEntityAddressCreateRequest.AddressType.BUSINESS)
                    .line2("line2")
                    .build()
            )
        assertThat(childLegalEntityCreate.bankSettings())
            .isEqualTo(
                BankSettings.builder()
                    .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .backupWithholdingPercentage(0L)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .enableBackupWithholding(true)
                    .liveMode(true)
                    .object_("object")
                    .privacyOptOut(true)
                    .regulationO(true)
                    .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(childLegalEntityCreate.businessName()).isEqualTo("business_name")
        assertThat(childLegalEntityCreate.citizenshipCountry()).isEqualTo("citizenship_country")
        assertThat(childLegalEntityCreate.complianceDetails())
            .isEqualTo(
                LegalEntityComplianceDetail.builder()
                    .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .issuer("issuer")
                    .liveMode(true)
                    .object_("object")
                    .tokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .tokenIssuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .tokenUrl("token_url")
                    .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .entityValidated(true)
                    .validatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(childLegalEntityCreate.dateFormed()).isEqualTo(LocalDate.parse("2019-12-27"))
        assertThat(childLegalEntityCreate.dateOfBirth()).isEqualTo(LocalDate.parse("2019-12-27"))
        assertThat(childLegalEntityCreate.doingBusinessAsNames()).containsExactly("string")
        assertThat(childLegalEntityCreate.email()).isEqualTo("email")
        assertThat(childLegalEntityCreate.firstName()).isEqualTo("first_name")
        assertThat(childLegalEntityCreate.identifications())
            .containsExactly(
                IdentificationCreateRequest.builder()
                    .idNumber("id_number")
                    .idType(IdentificationCreateRequest.IdType.AR_CUIL)
                    .expirationDate(LocalDate.parse("2019-12-27"))
                    .issuingCountry("issuing_country")
                    .issuingRegion("issuing_region")
                    .build()
            )
        assertThat(childLegalEntityCreate.industryClassifications())
            .containsExactly(
                LegalEntityIndustryClassification.builder()
                    .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .addClassificationCode("string")
                    .classificationType(LegalEntityIndustryClassification.ClassificationType.ANZSIC)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .liveMode(true)
                    .object_("object")
                    .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .build()
            )
        assertThat(childLegalEntityCreate.lastName()).isEqualTo("last_name")
        assertThat(childLegalEntityCreate.legalEntityType())
            .isEqualTo(ChildLegalEntityCreate.LegalEntityType.BUSINESS)
        assertThat(childLegalEntityCreate.legalStructure())
            .isEqualTo(ChildLegalEntityCreate.LegalStructure.CORPORATION)
        assertThat(childLegalEntityCreate.metadata())
            .isEqualTo(
                ChildLegalEntityCreate.Metadata.builder()
                    .putAdditionalProperty("key", JsonValue.from("value"))
                    .putAdditionalProperty("foo", JsonValue.from("bar"))
                    .putAdditionalProperty("modern", JsonValue.from("treasury"))
                    .build()
            )
        assertThat(childLegalEntityCreate.middleName()).isEqualTo("middle_name")
        assertThat(childLegalEntityCreate.phoneNumbers())
            .containsExactly(
                ChildLegalEntityCreate.PhoneNumber.builder().phoneNumber("phone_number").build()
            )
        assertThat(childLegalEntityCreate.politicallyExposedPerson()).isEqualTo(true)
        assertThat(childLegalEntityCreate.preferredName()).isEqualTo("preferred_name")
        assertThat(childLegalEntityCreate.prefix()).isEqualTo("prefix")
        assertThat(childLegalEntityCreate.riskRating())
            .isEqualTo(ChildLegalEntityCreate.RiskRating.LOW)
        assertThat(childLegalEntityCreate.suffix()).isEqualTo("suffix")
        assertThat(childLegalEntityCreate.wealthAndEmploymentDetails())
            .isEqualTo(
                WealthAndEmploymentDetails.builder()
                    .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                    .annualIncome(0L)
                    .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .employerCountry("employer_country")
                    .employerName("employer_name")
                    .employerState("employer_state")
                    .employmentStatus(WealthAndEmploymentDetails.EmploymentStatus.EMPLOYED)
                    .incomeCountry("income_country")
                    .incomeSource(WealthAndEmploymentDetails.IncomeSource.FAMILY_SUPPORT)
                    .incomeState("income_state")
                    .industry(WealthAndEmploymentDetails.Industry.ACCOUNTING)
                    .liveMode(true)
                    .object_("object")
                    .occupation(WealthAndEmploymentDetails.Occupation.CONSULTING)
                    .sourceOfFunds(WealthAndEmploymentDetails.SourceOfFunds.ALIMONY)
                    .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                    .wealthSource(WealthAndEmploymentDetails.WealthSource.BUSINESS_SALE)
                    .build()
            )
        assertThat(childLegalEntityCreate.website()).isEqualTo("website")
    }

    @Test
    fun roundtrip() {
        val jsonMapper = jsonMapper()
        val childLegalEntityCreate =
            ChildLegalEntityCreate.builder()
                .addAddress(
                    LegalEntityAddressCreateRequest.builder()
                        .country("country")
                        .line1("line1")
                        .locality("locality")
                        .postalCode("postal_code")
                        .region("region")
                        .addAddressType(LegalEntityAddressCreateRequest.AddressType.BUSINESS)
                        .line2("line2")
                        .build()
                )
                .bankSettings(
                    BankSettings.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .backupWithholdingPercentage(0L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .enableBackupWithholding(true)
                        .liveMode(true)
                        .object_("object")
                        .privacyOptOut(true)
                        .regulationO(true)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .businessName("business_name")
                .citizenshipCountry("citizenship_country")
                .complianceDetails(
                    LegalEntityComplianceDetail.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .issuer("issuer")
                        .liveMode(true)
                        .object_("object")
                        .tokenExpiresAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .tokenIssuedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .tokenUrl("token_url")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .entityValidated(true)
                        .validatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .dateFormed(LocalDate.parse("2019-12-27"))
                .dateOfBirth(LocalDate.parse("2019-12-27"))
                .addDoingBusinessAsName("string")
                .email("email")
                .firstName("first_name")
                .addIdentification(
                    IdentificationCreateRequest.builder()
                        .idNumber("id_number")
                        .idType(IdentificationCreateRequest.IdType.AR_CUIL)
                        .expirationDate(LocalDate.parse("2019-12-27"))
                        .issuingCountry("issuing_country")
                        .issuingRegion("issuing_region")
                        .build()
                )
                .addIndustryClassification(
                    LegalEntityIndustryClassification.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .addClassificationCode("string")
                        .classificationType(
                            LegalEntityIndustryClassification.ClassificationType.ANZSIC
                        )
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .liveMode(true)
                        .object_("object")
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .build()
                )
                .lastName("last_name")
                .legalEntityType(ChildLegalEntityCreate.LegalEntityType.BUSINESS)
                .legalStructure(ChildLegalEntityCreate.LegalStructure.CORPORATION)
                .metadata(
                    ChildLegalEntityCreate.Metadata.builder()
                        .putAdditionalProperty("key", JsonValue.from("value"))
                        .putAdditionalProperty("foo", JsonValue.from("bar"))
                        .putAdditionalProperty("modern", JsonValue.from("treasury"))
                        .build()
                )
                .middleName("middle_name")
                .addPhoneNumber(
                    ChildLegalEntityCreate.PhoneNumber.builder().phoneNumber("phone_number").build()
                )
                .politicallyExposedPerson(true)
                .preferredName("preferred_name")
                .prefix("prefix")
                .riskRating(ChildLegalEntityCreate.RiskRating.LOW)
                .suffix("suffix")
                .wealthAndEmploymentDetails(
                    WealthAndEmploymentDetails.builder()
                        .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                        .annualIncome(0L)
                        .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .employerCountry("employer_country")
                        .employerName("employer_name")
                        .employerState("employer_state")
                        .employmentStatus(WealthAndEmploymentDetails.EmploymentStatus.EMPLOYED)
                        .incomeCountry("income_country")
                        .incomeSource(WealthAndEmploymentDetails.IncomeSource.FAMILY_SUPPORT)
                        .incomeState("income_state")
                        .industry(WealthAndEmploymentDetails.Industry.ACCOUNTING)
                        .liveMode(true)
                        .object_("object")
                        .occupation(WealthAndEmploymentDetails.Occupation.CONSULTING)
                        .sourceOfFunds(WealthAndEmploymentDetails.SourceOfFunds.ALIMONY)
                        .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                        .wealthSource(WealthAndEmploymentDetails.WealthSource.BUSINESS_SALE)
                        .build()
                )
                .website("website")
                .build()

        val roundtrippedChildLegalEntityCreate =
            jsonMapper.readValue(
                jsonMapper.writeValueAsString(childLegalEntityCreate),
                jacksonTypeRef<ChildLegalEntityCreate>(),
            )

        assertThat(roundtrippedChildLegalEntityCreate).isEqualTo(childLegalEntityCreate)
    }
}
