package com.moderntreasury.api.models

import java.time.OffsetDateTime
import org.assertj.core.api.Assertions.assertThat
import org.junit.jupiter.api.Test

class LedgerEntryTest {

    @Test
    fun createLedgerEntry() {
        val ledgerEntry =
            LedgerEntry.builder()
                .id("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .object_("string")
                .liveMode(true)
                .createdAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .updatedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .discardedAt(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
                .amount(123L)
                .direction(LedgerEntry.Direction.CREDIT)
                .status(LedgerEntry.Status.ARCHIVED)
                .ledgerAccountId("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
                .ledgerAccountLockVersion(123L)
                .ledgerAccountCurrency("string")
                .ledgerAccountCurrencyExponent(123L)
                .ledgerTransactionId("string")
                .resultingLedgerAccountBalances(
                    LedgerEntry.LedgerBalances.builder()
                        .pendingBalance(
                            LedgerEntry.LedgerBalances.LedgerBalance.builder()
                                .credits(123L)
                                .debits(123L)
                                .amount(123L)
                                .currency("string")
                                .currencyExponent(123L)
                                .build()
                        )
                        .postedBalance(
                            LedgerEntry.LedgerBalances.LedgerBalance.builder()
                                .credits(123L)
                                .debits(123L)
                                .amount(123L)
                                .currency("string")
                                .currencyExponent(123L)
                                .build()
                        )
                        .availableBalance(
                            LedgerEntry.LedgerBalances.LedgerBalance.builder()
                                .credits(123L)
                                .debits(123L)
                                .amount(123L)
                                .currency("string")
                                .currencyExponent(123L)
                                .build()
                        )
                        .build()
                )
                .metadata(LedgerEntry.Metadata.builder().build())
                .build()
        assertThat(ledgerEntry).isNotNull
        assertThat(ledgerEntry.id()).isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(ledgerEntry.object_()).isEqualTo("string")
        assertThat(ledgerEntry.liveMode()).isEqualTo(true)
        assertThat(ledgerEntry.createdAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(ledgerEntry.updatedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(ledgerEntry.discardedAt())
            .isEqualTo(OffsetDateTime.parse("2019-12-27T18:11:19.117Z"))
        assertThat(ledgerEntry.amount()).isEqualTo(123L)
        assertThat(ledgerEntry.direction()).isEqualTo(LedgerEntry.Direction.CREDIT)
        assertThat(ledgerEntry.status()).isEqualTo(LedgerEntry.Status.ARCHIVED)
        assertThat(ledgerEntry.ledgerAccountId()).isEqualTo("182bd5e5-6e1a-4fe4-a799-aa6d9a6ab26e")
        assertThat(ledgerEntry.ledgerAccountLockVersion()).isEqualTo(123L)
        assertThat(ledgerEntry.ledgerAccountCurrency()).isEqualTo("string")
        assertThat(ledgerEntry.ledgerAccountCurrencyExponent()).isEqualTo(123L)
        assertThat(ledgerEntry.ledgerTransactionId()).isEqualTo("string")
        assertThat(ledgerEntry.resultingLedgerAccountBalances())
            .isEqualTo(
                LedgerEntry.LedgerBalances.builder()
                    .pendingBalance(
                        LedgerEntry.LedgerBalances.LedgerBalance.builder()
                            .credits(123L)
                            .debits(123L)
                            .amount(123L)
                            .currency("string")
                            .currencyExponent(123L)
                            .build()
                    )
                    .postedBalance(
                        LedgerEntry.LedgerBalances.LedgerBalance.builder()
                            .credits(123L)
                            .debits(123L)
                            .amount(123L)
                            .currency("string")
                            .currencyExponent(123L)
                            .build()
                    )
                    .availableBalance(
                        LedgerEntry.LedgerBalances.LedgerBalance.builder()
                            .credits(123L)
                            .debits(123L)
                            .amount(123L)
                            .currency("string")
                            .currencyExponent(123L)
                            .build()
                    )
                    .build()
            )
        assertThat(ledgerEntry.metadata()).isEqualTo(LedgerEntry.Metadata.builder().build())
    }
}
